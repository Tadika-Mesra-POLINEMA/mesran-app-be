// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique @db.VarChar(100)
  phone              String    @db.Char(13)
  password           String    @db.Text
  role               Role      @default(USER)
  is_face_registered Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime? @updatedAt

  // Users can have more than one event
  profile            Profile?
  events             Event[]
  event_participants EventParticipant[]
  chat_rooms         UserChatRoom[]
  messages           Message[]
  notifications      EventNotification[]

  @@map("users")
}

model Profile {
  id        String  @id @default(uuid())
  user_id   String  @unique
  username  String  @unique @db.VarChar(50)
  firstname String  @db.VarChar(50)
  lastname  String? @db.VarChar(50)

  user User @relation(fields: [user_id], references: [id])

  @@map("profiles")
}

model Authentication {
  id    String @id @default(uuid())
  token String @unique

  @@map("authentications")
}

model EventActivity {
  id             String    @id @default(uuid())
  event_id       String
  title          String    @db.VarChar(100)
  description    String    @db.Text
  activity_start DateTime  @db.Date
  activity_end   DateTime  @db.Date
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  // Relationships
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@map("event_activities")
}

model Event {
  id           String   @id @default(uuid())
  user_id      String
  name         String   @db.VarChar(100)
  target_date  DateTime @db.Date
  event_start  DateTime
  event_end    DateTime
  location     String   @db.VarChar(120)
  member_count Int      @default(0) @db.Int
  description  String   @db.Text
  dress        String   @db.VarChar(30)
  theme        String   @db.VarChar(50)
  is_done      Boolean  @default(false)
  is_canceled  Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relationships
  owner         User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  activities    EventActivity[]
  participants  EventParticipant[]
  notifications EventNotification[]

  @@map("events")
}

model EventParticipant {
  id             String   @id @default(uuid())
  user_id        String
  event_id       String
  accepted       Boolean  @default(false)
  declined       Boolean  @default(false)
  participate_at DateTime @default(now())

  // Relationships
  user  User  @relation(fields: [user_id], references: [id])
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@map("event_participants")
}

model EventNotification {
  id         String   @id @default(uuid())
  user_id    String
  event_id   String
  sent_at    DateTime
  read       Boolean
  created_at DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@map("event_notifications")
}

model ChatRoom {
  id         String    @id @default(uuid())
  is_group   Boolean
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  // Relationships
  users    UserChatRoom[]
  messages Message[]

  @@map("chat_rooms")
}

model Message {
  id         String    @id @default(uuid())
  user_id    String
  room_id    String
  content    String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user     User     @relation(fields: [user_id], references: [id])
  chatroom ChatRoom @relation(fields: [room_id], references: [id])

  @@map("messages")
}

model UserChatRoom {
  id        String   @id @default(uuid())
  user_id   String
  room_id   String
  joined_at DateTime @default(now())

  // Relationships
  user User     @relation(fields: [user_id], references: [id])
  room ChatRoom @relation(fields: [room_id], references: [id])

  @@unique([user_id, room_id])
  @@map("user_chat_rooms")
}
