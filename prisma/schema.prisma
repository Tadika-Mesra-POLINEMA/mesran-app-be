// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique @db.VarChar(100)
  phone     String    @db.Char(13)
  password  String    @db.Text
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Users can have more than one event
  profile           Profile?
  events            Event[]
  eventParticipants EventParticipant[]
  chatRooms         UserChatRoom[]
  messages          Message[]
  notifications     EventNotification[]
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  username  String  @unique @db.VarChar(50)
  firstname String  @db.VarChar(50)
  lastname  String? @db.VarChar(50)

  User User @relation(fields: [userId], references: [id])
}

model EventDress {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(30)
  createdAt DateTime @default(now())

  // Relationships
  events Event[]
}

model EventActivity {
  id            String    @id @default(uuid())
  eventId       String
  title         String    @db.VarChar(100)
  description   String    @db.Text
  activityStart DateTime  @db.Date
  activityEnd   DateTime  @db.Date
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  // Relationships
  event Event @relation(fields: [eventId], references: [id])
}

model Event {
  id          String   @id @default(uuid())
  userId      String
  name        String   @db.VarChar(100)
  targetDate  DateTime @db.Date
  eventStart  DateTime
  eventEnd    DateTime
  dressId     String
  venue       String   @db.VarChar(120)
  memberCount Int      @db.Int
  coverColor  String?  @db.VarChar(10)
  coverType   String?  @db.VarChar(10)
  description String   @db.Text
  isDone      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  eventOwner         User                @relation(fields: [userId], references: [id])
  eventDress         EventDress          @relation(fields: [dressId], references: [id])
  eventActivities    EventActivity[]
  eventParticipants  EventParticipant[]
  eventNotifications EventNotification[]
}

model EventParticipant {
  id            String   @id @default(uuid())
  userId        String
  eventId       String
  participateAt DateTime

  // Relationships
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model EventNotification {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  sentAt    DateTime
  read      Boolean
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model ChatRoom {
  id        String    @id @default(uuid())
  isGroup   Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Relationships
  users    UserChatRoom[]
  messages Message[]
}

model Message {
  id        String    @id @default(uuid())
  userId    String
  roomId    String
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  chatroom ChatRoom @relation(fields: [roomId], references: [id])
}

model UserChatRoom {
  id       String   @id @default(uuid())
  userId   String
  roomId   String
  joinedAt DateTime @default(now())

  // Relationships
  user User     @relation(fields: [userId], references: [id])
  room ChatRoom @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}
