generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique @db.VarChar(100)
  phone              String              @db.Char(13)
  password           String              @db.Text
  role               Role                @default(USER)
  created_at         DateTime            @default(now())
  updated_at         DateTime?           @updatedAt
  is_face_registered Boolean             @default(false)
  notifications      EventNotification[] @relation("recipient_relation")
  sent_notifications EventNotification[] @relation("sender_relation")
  event_participants EventParticipant[]
  events             Event[]
  messages           Message[]
  profile            Profile?
  chat_rooms         UserChatRoom[]

  @@map("users")
}

model Profile {
  id        String  @id @default(uuid())
  user_id   String  @unique
  username  String  @unique @db.VarChar(50)
  firstname String  @db.VarChar(50)
  lastname  String? @db.VarChar(50)
  user      User    @relation(fields: [user_id], references: [id])

  @@map("profiles")
}

model Authentication {
  id    String @id @default(uuid())
  token String @unique

  @@map("authentications")
}

model EventActivity {
  id             String    @id @default(uuid())
  event_id       String
  title          String    @db.VarChar(100)
  description    String    @db.Text
  activity_start DateTime
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt
  activity_end   DateTime
  event          Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id], map: "event_activities_event_id_fkey")
  @@map("event_activities")
}

model Event {
  id            String              @id @default(uuid())
  user_id       String
  name          String              @db.VarChar(100)
  event_start   DateTime
  member_count  Int                 @default(0)
  description   String              @db.Text
  is_done       Boolean             @default(false)
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
  dress         String              @db.VarChar(30)
  location      String              @db.VarChar(120)
  target_date   DateTime
  theme         String              @db.VarChar(50)
  is_canceled   Boolean             @default(false)
  activities    EventActivity[]
  notifications EventNotification[]
  participants  EventParticipant[]
  owner         User                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "events_user_id_fkey")
  @@map("events")
}

model EventParticipant {
  id             String   @id @default(uuid())
  user_id        String
  event_id       String
  participate_at DateTime @default(now())
  accepted       Boolean  @default(false)
  declined       Boolean  @default(false)
  is_attended    Boolean  @default(false)
  event          Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [user_id], references: [id])

  @@index([event_id], map: "event_participants_event_id_fkey")
  @@index([user_id], map: "event_participants_user_id_fkey")
  @@map("event_participants")
}

model ChatRoom {
  id         String         @id @default(uuid())
  is_group   Boolean
  created_at DateTime       @default(now())
  updated_at DateTime?      @updatedAt
  messages   Message[]
  users      UserChatRoom[]

  @@map("chat_rooms")
}

model Message {
  id         String    @id @default(uuid())
  user_id    String
  room_id    String
  content    String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  chatroom   ChatRoom  @relation(fields: [room_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])

  @@index([room_id], map: "messages_room_id_fkey")
  @@index([user_id], map: "messages_user_id_fkey")
  @@map("messages")
}

model UserChatRoom {
  id        String   @id @default(uuid())
  user_id   String
  room_id   String
  joined_at DateTime @default(now())
  room      ChatRoom @relation(fields: [room_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, room_id])
  @@index([room_id], map: "user_chat_rooms_room_id_fkey")
  @@map("user_chat_rooms")
}

model EventNotification {
  id           String           @id @default(uuid())
  event_id     String
  sender_id    String?
  recipient_id String
  content      String           @db.Text
  type         NotificationType @default(MESSAGE)
  sent_at      DateTime         @default(now())
  created_at   DateTime         @default(now())
  event        Event            @relation(fields: [event_id], references: [id])
  recipient    User             @relation("recipient_relation", fields: [recipient_id], references: [id])
  sender       User?            @relation("sender_relation", fields: [sender_id], references: [id])

  @@index([event_id], map: "event_notifications_event_id_fkey")
  @@index([recipient_id], map: "event_notifications_recipient_id_fkey")
  @@index([sender_id], map: "event_notifications_sender_id_fkey")
  @@map("event_notifications")
}

enum NotificationType {
  MESSAGE
  ALERT
  REMINDER
  CONFIRMATION
}

enum Role {
  USER
  ADMIN
}
